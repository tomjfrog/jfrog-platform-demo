resources:
  - name: CustomersServiceDockerImage
    type: Image
    configuration:
      registry: jfrog_cloud
      sourceRepository: docker
      imageName: tomjfrog.jfrog.io/petclinic-microservices-virtual/pet_clinic_customers_service_docker_image
      imageTag: '${run_number}'
      autoPull: true
  - name: CustomersServiceBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: jfrog_cloud
      buildName: petclinic_microservices_helm
      buildNumber: 1
  - name: PetClinicCustomersServiceHelmChart
    type: HelmChart
    configuration:
      sourceArtifactory: jfrog_cloud
      repository: helm-local
      chart: pet-clinic-customers-service
      version: '0.1.${run_number}'
  - name: PetClinicCustomersServiceHelmBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: jfrog_cloud
      buildName: petclinic_microservices_helm
      buildNumber: 1
  - name: PetClinicCustomersServicePromotedHelmChart
    type: HelmChart
    configuration:
      sourceArtifactory: jfrog_cloud
      repository: helm-prod-local
      chart: pet-clinic-customers-service
      version: '0.${run_number}.0'
  - name: CustomersServiceDockerImagePromotedBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: jfrog_cloud
      buildName: petclinic_microservices_helm
      buildNumber: 1
pipelines:
  - name: pet_clinic_customers_service
    configuration:
      environmentVariables:
        readOnly:
          my_env_var: '1.0.$run_number'
          ArtIP: $(echo ${int_jfrog_cloud_url}|awk -F '/' '{print $3}'|awk -F ':' '{print $1}')
    steps:
      - name: bld_customers_service
        type: MvnBuild
        configuration:
          sourceLocation: app/spring-petclinic-customers-service
          mvnCommand: clean install -ntp
          configFileLocation: .
          configFileName: mvn-art-config
          inputResources:
            - name: PetClinicProjectGitRepo
              trigger: false
          integrations:
            - name: jfrog_cloud
          runtime:
            type: image
            image:
              auto:
                language: java
                versions:
                  - "11"
        execution:
          onStart:
            - javac -version
            - mvn --version
            #- add_pipeline_variables previous_backend_ver=${my_env_var}
            - sed -ie 's/Default-Server/jfrog_cloud/g' $res_PetClinicProjectGitRepo_resourcePath/app/spring-petclinic-customers-service/mvn-art-config
            #- sed -ie "s/2.3.1/$my_env_var/g" $res_PetClinicProjectGitRepo_resourcePath/spring-petclinic-customers-service/pom.xml
          onComplete:
            - echo $run_var
            - echo "Running $pipeline_name | $step_name on node ID $step_node_id"
          onSuccess:
            - rm -r ${steplet_run_state_dir}/jfrog
      - name: bld_customers_service_docker_image
        type: DockerBuild
        configuration:
          affinityGroup: bldGroup
          dockerFileLocation: app/spring-petclinic-customers-service
          dockerFileName: Dockerfile
          dockerImageName: tomjfrog.jfrog.io/petclinic-microservices-virtual/pet_clinic_customers_service_docker_image
          dockerImageTag: '${run_number}'
          integrations:
            - name: jfrog_cloud
          inputResources:
            - name: PetClinicProjectGitRepo
              trigger: false
          outputResources:
            - name: CustomersServiceDockerImage
          inputSteps:
            - name: bld_customers_service
        execution:
          onStart:
            - sed -i "s/docker.artifactory/docker.${ArtIP}/" $res_PetClinicProjectGitRepo_resourcePath/app/spring-petclinic-customers-service/Dockerfile
            - sed -i "s/artifactory-unified.soleng-us.jfrog.team/${ArtIP}/" $res_PetClinicProjectGitRepo_resourcePath/app/spring-petclinic-customers-service/Dockerfile
            #- sed -i "s/1.0.0/$previous_backend_ver/g" $res_PetClinicProjectGitRepo_resourcePath/Dockerfile
          onComplete:
            - echo $step_env_var2
            - echo "Running $pipeline_name | $step_name on node ID $step_node_id"
      - name: push_customers_service_docker_image
        type: DockerPush
        configuration:
          affinityGroup: bldGroup
          targetRepository: docker
          forceXrayScan: false
          autoPublishBuildInfo: true
          integrations:
            - name: jfrog_cloud
          inputSteps:
            - name: bld_customers_service_docker_image
          outputResources:
            - name: CustomersServiceBuildInfo
  - name: pet_clinic_customers_service_helm_deploy
    steps:
      - name: helm_build
        type: HelmPublish
        configuration:
          chartPath: app/spring-petclinic-customers-service/pet-clinic-customers-service
          autoPublishBuildInfo: true
          flags: "-u"
          inputResources:
            - name: PetClinicProjectGitRepo
              trigger: false
            - name: CustomersServiceBuildInfo
            - name: PetClinicDiscoveryServerPromotedHelmBuildInfo
              trigger: false
          outputResources:
            - name: PetClinicCustomersServiceHelmChart
            - name: PetClinicCustomersServiceHelmBuildInfo
        execution:
          onStart:
            - helm init --client-only --skip-refresh
            - helm repo rm stable
            - helm repo add stable https://charts.helm.sh/stable
            - pushd $res_PetClinicProjectGitRepo_resourcePath/app/spring-petclinic-customers-service/pet-clinic-customers-service
            - add_pipeline_variables triggerBuildInfoNumber="${res_CustomersServiceBuildInfo_buildNumber}"
            - sed -i "s/0.1.0/0.$run_number.0/g" Chart.yaml
            - sed -i "s/1.1/$triggerBuildInfoNumber/" values.yaml
            - sed -i "s/0.19.0/0.${res_PetClinicDiscoveryServerPromotedHelmBuildInfo_buildNumber}.0/" requirements.yaml
      - name: deploy_helm
        type: HelmDeploy
        configuration:
          releaseName: customers-service
          integrations:
            - name: tomj_gke_cluster #SolEngUS
          inputResources:
            - name: PetClinicCustomersServiceHelmChart
          flags: '--namespace default --force'
          valueFilePaths:
            - values.yaml
        execution:
          #onStart:
          #- helm init --service-account pet-clinic --namespace default
          onStart:
            - helm init --client-only --skip-refresh
            - helm repo rm stable
            - helm repo add stable https://charts.helm.sh/stable
          onSuccess:
            - kubectl get pods --namespace default
          onComplete: #always
            #- sleep 30
            - kubectl get pods
            #- kubectl get pods --no-headers=true | awk '/ui-server/{print $1}'
            - add_run_variables pod_name="$(kubectl get pods --no-headers=true | awk '/customers-service/{print $1}')"
            - add_run_variables pod_ip="$(kubectl describe pod $pod_name | grep "IP:" | awk '{print $2}')"
            - echo "pod name is $pod_name and pod ip is $pod_ip"
      - name: test_docker_app
        type: Bash
        configuration:
          inputSteps:
            - name: deploy_helm
          integrations:
            - name: jfrog_cloud
        execution:
          onStart:
            - echo "testing docker application" #$latest_docker_ver
          onExecute:
            - echo "testing"
            - echo "$pod_ip"
            #- PAGE=$(curl -s "http://localhost:8088/index.html" | tr '[:upper:]' '[:lower:]')
            #- if [[ $PAGE =~ "swampup" ]]; then echo "swampup found" fi
            #- if curl -Is "http://$pod_ip:8081"; then add_run_variables dockerAppStatus="pass"; else add_run_variables dockerAppStatus="fail"; fi
            #- if curl -Is "http://$pod_ip:8080/index.html"; then add_run_variables docker_promotion_repo=docker-prod-local; else add_run_variables docker_promotion_repo=docker-archive-local; fi
          onComplete: #always
            - echo "testing done"
            - echo "pet clinic discovery image status is $dockerAppStatus"
            - curl -u ${int_jfrog_cloud_user}:${int_jfrog_cloud_apikey} --header "Content-Type:application/json" --request PATCH  ${int_jfrog_cloud_url}/api/metadata/docker-dev-local/pet_clinic_customers_service_docker_image/$triggerBuildInfoNumber --data '{"props":{"unittest":"passed"}}'
      - name: scan_customer_docker_image
        type: XrayScan
        configuration:
          failOnScan: false
          inputSteps:
            - name: test_docker_app
          inputResources:
            - name: CustomersServiceBuildInfo
              trigger: false
        execution:
          onStart:
            - echo "Xray scan to start"
          onComplete: #always
            - echo "Xray scan complete"
      - name: promote_docker_app
        type: PromoteBuild
        configuration:
          targetRepository: docker-prod-local
          integrations:
            - name: jfrog_cloud
          inputSteps:
            - name: scan_customer_docker_image
          inputResources:
            - name: CustomersServiceBuildInfo
              trigger: false
          outputResources:
            - name: CustomersServiceDockerImagePromotedBuildInfo
        execution:
          onStart:
            - echo "Promotion repo is docker-prod-local"
          onComplete: #always
            - echo "Promotion complete"
            - curl -u ${int_jfrog_cloud_user}:${int_jfrog_cloud_apikey} --header "Content-Type:application/json" --request PATCH  ${int_jfrog_cloud_url}/api/metadata/docker-prod-local/pet_clinic_customers_service_docker_image/$triggerBuildInfoNumber --data '{"props":{"xrayscan":"passed"}}'
      - name: promote_helm_chart
        type: PromoteBuild
        configuration:
          targetRepository: helm-prod-local
          integrations:
            - name: jfrog_cloud
          inputSteps:
            - name: promote_docker_app
          inputResources:
            - name: PetClinicCustomersServiceHelmBuildInfo
          outputResources:
            - name: PetClinicCustomersServicePromotedHelmBuildInfo