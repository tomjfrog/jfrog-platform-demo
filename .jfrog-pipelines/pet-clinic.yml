 resources:
   - name: PetClinicHelmChart
     type: HelmChart
     configuration:
       sourceArtifactory: jfrog_cloud
       repository: helm-local
       chart: pet-clinic
       version: '0.1.${run_number}'
   - name: PetClinicHelmBuildInfo
     type: BuildInfo
     configuration:
       sourceArtifactory: jfrog_cloud
       buildName: petclinic_microservices_helm
       buildNumber: 1
   - name: PetClinicPromotedHelmChart
     type: HelmChart
     configuration:
       sourceArtifactory: jfrog_cloud
       repository: helm-prod-local
       chart: pet-clinic
       version: '0.1.${run_number}'
 pipelines:
   - name: pet_clinic_app_deploy
     steps:
       - name: helm_build
         type: HelmPublish
         configuration:
           chartPath: pet-clinic
           autoPublishBuildInfo: true
           flags: "-u"
           helmVersion: 3
           inputResources:
             - name: PetClinicProjectGitRepo
               trigger: false
             - name: PetClinicConfigServerPromotedHelmBuildInfo
               trigger: false
             - name: PetClinicDiscoveryServerPromotedHelmBuildInfo
               trigger: false
             - name: PetClinicCustomersServicePromotedHelmBuildInfo
               trigger: false
             - name: PetClinicUIServicePromotedHelmBuildInfo
               trigger: false
             - name: PetClinicVetsServicePromotedHelmBuildInfo
               trigger: false
             - name: PetClinicVisitsServicePromotedHelmBuildInfo
               trigger: false
           outputResources:
             - name: PetClinicHelmChart
             - name: PetClinicHelmBuildInfo
         execution:
           onStart:
             - helm init --client-only --skip-refresh
             - helm repo rm stable
             - helm repo add stable https://charts.helm.sh/stable
             - pushd $res_PetClinicProjectGitRepo_resourcePath/pet-clinic
             - pwd
             - ls -lah
             #- add_pipeline_variables triggerBuildInfoName="${res_myBuildInfo_buildName}"
             #- add_pipeline_variables triggerBuildInfoNumber="${res_myBuildInfo_buildNumber}"
             #- sed -i "s/docker.artifactory/docker.artifactory-unified.soleng-us.jfrog.team/" values.yaml
             #- sed -i "s/docker-app/swampup_docker_app_demo/" values.yaml
             - sed -i "s/0.1.0/0.1.$run_number/g" Chart.yaml
             - sed -i "s/0.111.0/0.${res_PetClinicConfigServerPromotedHelmBuildInfo_buildNumber}.0/" requirements.yaml
             - sed -i "s/0.112.0/0.${res_PetClinicDiscoveryServerPromotedHelmBuildInfo_buildNumber}.0/" requirements.yaml
             - sed -i "s/0.115.0/0.${res_PetClinicVisitsServicePromotedHelmBuildInfo_buildNumber}.0/" requirements.yaml
             - sed -i "s/0.114.0/0.${res_PetClinicVetsServicePromotedHelmBuildInfo_buildNumber}.0/" requirements.yaml
             - sed -i "s/0.113.0/0.${res_PetClinicUIServicePromotedHelmBuildInfo_buildNumber}.0/" requirements.yaml
             - sed -i "s/0.116.0/0.${res_PetClinicCustomersServicePromotedHelmBuildInfo_buildNumber}.0/" requirements.yaml
             - cat requirements.yaml
#             #- sed -i "s/latest/1.1.1/" values.yaml
#             #- sed -i "s/1.1.1/$triggerBuildInfoNumber/" values.yaml
       - name: deploy_helm
         type: HelmDeploy
         configuration:
           releaseName: pet-clinic
           helmVersion: 3
           integrations:
             - name: tomj_gke_cluster #SolEng-Dev GCP
             - name: gcp_service_account_for_gke_cluster # GCP Service Account JSON Key
           inputResources:
             - name: PetClinicHelmChart
           flags: '--namespace=default --force'
           valueFilePaths:
             - values.yaml
         execution:
           onStart:
             #- helm init --service-account pet-clinic --namespace default
             - helm init --client-only --skip-refresh
             - helm repo rm stable
             - helm repo add stable https://charts.helm.sh/stable
             - add_run_variables running_pod_name="$(kubectl get pods | awk '/ui-service/{print $1}')"
             - echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
             - echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
             - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
             - apt-get update && apt-get install google-cloud-sdk google-cloud-sdk-gke-gcloud-auth-plugin
             - apt-get update && apt-get --only-upgrade install google-cloud-sdk-app-engine-python-extras google-cloud-sdk-datalab google-cloud-sdk-config-connector google-cloud-sdk-harbourbridge google-cloud-sdk-app-engine-java google-cloud-sdk google-cloud-sdk-spanner-emulator google-cloud-sdk-package-go-module google-cloud-sdk-skaffold kubectl google-cloud-sdk-terraform-tools google-cloud-sdk-kubectl-oidc google-cloud-sdk-cbt google-cloud-sdk-log-streaming google-cloud-sdk-local-extract google-cloud-sdk-pubsub-emulator google-cloud-sdk-app-engine-grpc google-cloud-sdk-app-engine-python google-cloud-sdk-app-engine-go google-cloud-sdk-anthos-auth google-cloud-sdk-nomos google-cloud-sdk-cloud-run-proxy google-cloud-sdk-firestore-emulator google-cloud-sdk-gke-gcloud-auth-plugin google-cloud-sdk-cloud-build-local google-cloud-sdk-minikube google-cloud-sdk-kpt google-cloud-sdk-bigtable-emulator google-cloud-sdk-datastore-emulator
             - printenv int_gcp_service_account_for_gke_cluster_GCLOUD_SERVICE_ACCOUNT_KEY | base64 --decode > ${HOME}/gcloud-service-key.json
             - gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
             - gcloud container clusters get-credentials tomj-cluster-003 --zone us-east1-c --project soleng-dev
           onSuccess:
             - kubectl get pods --namespace default
           onComplete: #always
             - sleep 30
             - kubectl get pods
             - kubectl get pods --no-headers=true | awk '/ui-server/{print $1}'
             - add_run_variables pod_name="$(kubectl get pods --no-headers=true | awk '/ui-service/{print $1}')"
             - add_run_variables pod_ip="$(kubectl describe service ui-service | grep "LoadBalancer Ingress" | awk '{print $3}')"
             - echo "pod name is $pod_name and pod ip is $pod_ip"
       - name: test_docker_app
         type: Bash
         configuration:
           inputSteps:
             - name: deploy_helm
           inputResources:
             - name: ConfigServerDockerImagePromotedBuildInfo
               trigger: false
             - name: DiscoveryServerDockerImagePromotedBuildInfo
               trigger: false
             - name: CustomersServiceDockerImagePromotedBuildInfo
               trigger: false
             - name: UIServiceDockerImagePromotedBuildInfo
               trigger: false
             - name: VetsServiceDockerImagePromotedBuildInfo
               trigger: false
             - name: VisitsServiceDockerImagePromotedBuildInfo
               trigger: false
           integrations:
             - name: jfrog_cloud
         execution:
           onStart:
             - echo "testing pet clinic application" #$latest_docker_ver
           onExecute:
             #- PAGE=$(curl -s "http://localhost:8088/index.html" | tr '[:upper:]' '[:lower:]')
             #- if [[ $PAGE =~ "swampup" ]]; then echo "swampup found" fi
             - if curl -Is "http://$pod_ip:8080/index.html"; then add_run_variables dockerAppStatus="pass"; else add_run_variables dockerAppStatus="fail"; fi
           onComplete: #always
             - echo "pet clinic image status is $dockerAppStatus"
             - curl -u ${int_jfrog_cloud_user}:${int_jfrog_cloud_apikey} --header "Content-Type:application/json" --request PATCH  ${int_jfrog_cloud_url}/api/metadata/petclinic-microservices-docker-prod-local/pet_clinic_config_server_docker_image/${res_ConfigServerDockerImagePromotedBuildInfo_buildNumber} --data '{"props":{"integrationtest":"passed"}}'
             - curl -u ${int_jfrog_cloud_user}:${int_jfrog_cloud_apikey} --header "Content-Type:application/json" --request PATCH  ${int_jfrog_cloud_url}/api/metadata/petclinic-microservices-docker-prod-local/pet_clinic_discovery_server_docker_image/${res_DiscoveryServerDockerImagePromotedBuildInfo_buildNumber} --data '{"props":{"integrationtest":"passed"}}'
             - curl -u ${int_jfrog_cloud_user}:${int_jfrog_cloud_apikey} --header "Content-Type:application/json" --request PATCH  ${int_jfrog_cloud_url}/api/metadata/petclinic-microservices-docker-prod-local/pet_clinic_customers_service_docker_image/${res_CustomersServiceDockerImagePromotedBuildInfo_buildNumber} --data '{"props":{"integrationtest":"passed"}}'
             - curl -u ${int_jfrog_cloud_user}:${int_jfrog_cloud_apikey} --header "Content-Type:application/json" --request PATCH  ${int_jfrog_cloud_url}/api/metadata/petclinic-microservices-docker-prod-local/pet_clinic_ui_service_docker_image/${res_UIServiceDockerImagePromotedBuildInfo_buildNumber} --data '{"props":{"integrationtest":"passed"}}'
             - curl -u ${int_jfrog_cloud_user}:${int_jfrog_cloud_apikey} --header "Content-Type:application/json" --request PATCH  ${int_jfrog_cloud_url}/api/metadata/petclinic-microservices-docker-prod-local/pet_clinic_vets_service_docker_image/${res_VetsServiceDockerImagePromotedBuildInfo_buildNumber} --data '{"props":{"integrationtest":"passed"}}'
             - curl -u ${int_jfrog_cloud_user}:${int_jfrog_cloud_apikey} --header "Content-Type:application/json" --request PATCH  ${int_jfrog_cloud_url}/api/metadata/petclinic-microservices-docker-prod-local/pet_clinic_visits_service_docker_image/${res_VisitsServiceDockerImagePromotedBuildInfo_buildNumber} --data '{"props":{"integrationtest":"passed"}}'
       - name: promote_helm_chart
         type: PromoteBuild
         configuration:
           targetRepository: helm-prod-local
           integrations:
             - name: jfrog_cloud
           inputSteps:
             - name: test_docker_app
           inputResources:
             - name: PetClinicHelmBuildInfo
               trigger: false
           outputResources:
             - name: PetClinicPromotedHelmBuildInfo
